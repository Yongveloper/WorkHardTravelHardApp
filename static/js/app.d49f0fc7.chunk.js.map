{"version":3,"sources":["color.js","App.js"],"names":["theme","App","useState","working","setWorking","text","setText","toDos","setToDos","useEffect","checkInitialMew","loadToDos","saveMenu","menu","AsyncStorage","setItem","error","console","travel","work","getItem","saveToDos","toSave","JSON","stringify","s","parse","addToDo","newToDos","Date","now","done","completeToDo","key","View","style","styles","container","StatusBar","header","TouchableOpacity","onPress","Text","fontSize","fontWeight","color","TextInput","onSubmitEditing","onChangeText","payload","returnKeyType","value","placeholder","input","ScrollView","Object","keys","map","toDo","toDoText","finishToDoText","toDoIcons","Fontisto","name","size","Platform","OS","confirm","Alert","alert","deleteToDo","StyleSheet","create","flex","backgroundColor","paddingHorizontal","justifyContent","flexDirection","marginTop","paddingVertical","borderRadius","marginVertical","marginBottom","alignItems","textDecorationLine"],"mappings":"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","file":"static/js/app.d49f0fc7.chunk.js","sourcesContent":["export const theme = {\r\n  bg: 'black',\r\n  grey: '#3A3D40',\r\n  toDoBg: '#5C5C60',\r\n};\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport { useEffect, useState } from 'react';\r\nimport {\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  TouchableOpacity,\r\n  TouchableHighlight,\r\n  TouchableWithoutFeedback,\r\n  TextInput,\r\n  Keyboard,\r\n  ScrollView,\r\n  Alert,\r\n  Platform,\r\n} from 'react-native';\r\nimport { Fontisto } from '@expo/vector-icons';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { theme } from './color';\r\n\r\nconst STORAGE_KEY = '@toDos';\r\nconst MENU_KEY = '@menu';\r\n\r\nexport default function App() {\r\n  const [working, setWorking] = useState(true);\r\n  const [text, setText] = useState('');\r\n  const [toDos, setToDos] = useState({});\r\n\r\n  useEffect(() => {\r\n    checkInitialMew();\r\n    loadToDos();\r\n  }, []);\r\n\r\n  const saveMenu = async (menu) => {\r\n    try {\r\n      await AsyncStorage.setItem(MENU_KEY, menu);\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const travel = async () => {\r\n    setWorking(false);\r\n    saveMenu('travel');\r\n  };\r\n  const work = async () => {\r\n    setWorking(true);\r\n    saveMenu('work');\r\n  };\r\n\r\n  const checkInitialMew = async () => {\r\n    const menu = await AsyncStorage.getItem(MENU_KEY);\r\n    if (menu === 'work') {\r\n      setWorking(true);\r\n    } else {\r\n      setWorking(false);\r\n    }\r\n  };\r\n\r\n  const onChangeText = (payload) => setText(payload);\r\n\r\n  const saveToDos = async (toSave) => {\r\n    try {\r\n      await AsyncStorage.setItem(STORAGE_KEY, JSON.stringify(toSave));\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const loadToDos = async () => {\r\n    const s = await AsyncStorage.getItem(STORAGE_KEY);\r\n    if (s) {\r\n      setToDos(JSON.parse(s));\r\n    }\r\n  };\r\n\r\n  const addToDo = async () => {\r\n    if (text === '') {\r\n      return;\r\n    }\r\n    const newToDos = {\r\n      ...toDos,\r\n      [Date.now()]: { text, working, done: false },\r\n    };\r\n    setToDos(newToDos);\r\n    await saveToDos(newToDos);\r\n    setText('');\r\n  };\r\n\r\n  const completeToDo = async (key) => {\r\n    const newToDos = {\r\n      ...toDos,\r\n      [key]: { ...toDos[key], done: !toDos[key].done },\r\n    };\r\n    setToDos(newToDos);\r\n    await saveToDos(newToDos);\r\n  };\r\n\r\n  const deleteToDo = (key) => {\r\n    if (Platform.OS === 'web') {\r\n      const ok = confirm('Delete To Do?');\r\n      if (ok) {\r\n        const newToDos = { ...toDos };\r\n        delete newToDos[key];\r\n        setToDos(newToDos);\r\n        saveToDos(newToDos);\r\n      }\r\n    } else {\r\n      Alert.alert('Delete To Do?', 'Are you sure', [\r\n        { text: 'Cancel' },\r\n        {\r\n          text: \"I'm sure\",\r\n          onPress: async () => {\r\n            const newToDos = { ...toDos };\r\n            delete newToDos[key];\r\n            setToDos(newToDos);\r\n            saveToDos(newToDos);\r\n          },\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    // 빈공간 터치시 키보드 사라짐 (TouchableWithoutFeedback => Keyboard.dismiss)\r\n    <View style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n      <View style={styles.header}>\r\n        <TouchableOpacity onPress={work}>\r\n          <Text\r\n            style={{\r\n              fontSize: 38,\r\n              fontWeight: '600',\r\n              color: working ? 'white' : theme.grey,\r\n            }}\r\n          >\r\n            Work\r\n          </Text>\r\n        </TouchableOpacity>\r\n        <TouchableOpacity onPress={travel}>\r\n          <Text\r\n            style={{\r\n              fontSize: 38,\r\n              fontWeight: '600',\r\n              color: !working ? 'white' : theme.grey,\r\n            }}\r\n          >\r\n            Travel\r\n          </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n      <TextInput\r\n        onSubmitEditing={addToDo}\r\n        onChangeText={onChangeText}\r\n        returnKeyType=\"done\"\r\n        value={text}\r\n        placeholder={working ? 'Add a To Do' : 'Where do you want to go?'}\r\n        style={styles.input}\r\n      />\r\n      <ScrollView>\r\n        {Object.keys(toDos).map(\r\n          (key) =>\r\n            toDos[key].working === working && (\r\n              <View style={styles.toDo} key={key}>\r\n                <Text\r\n                  style={[\r\n                    styles.toDoText,\r\n                    toDos[key].done && styles.finishToDoText,\r\n                  ]}\r\n                >\r\n                  {toDos[key].text}\r\n                </Text>\r\n                <View style={styles.toDoIcons}>\r\n                  <TouchableOpacity onPress={() => completeToDo(key)}>\r\n                    {toDos[key].done === true ? (\r\n                      <Fontisto\r\n                        name=\"checkbox-active\"\r\n                        size={24}\r\n                        color=\"black\"\r\n                      />\r\n                    ) : (\r\n                      <Fontisto\r\n                        name=\"checkbox-passive\"\r\n                        size={24}\r\n                        color=\"black\"\r\n                      />\r\n                    )}\r\n                  </TouchableOpacity>\r\n                  <TouchableOpacity onPress={() => deleteToDo(key)}>\r\n                    <Fontisto name=\"trash\" size={24} color=\"black\" />\r\n                  </TouchableOpacity>\r\n                </View>\r\n              </View>\r\n            )\r\n        )}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: theme.bg,\r\n    paddingHorizontal: 20,\r\n  },\r\n  header: {\r\n    justifyContent: 'space-between',\r\n    flexDirection: 'row',\r\n    marginTop: 100,\r\n  },\r\n  input: {\r\n    backgroundColor: 'white',\r\n    paddingVertical: 15,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 30,\r\n    marginVertical: 20,\r\n    fontSize: 18,\r\n  },\r\n  toDo: {\r\n    backgroundColor: theme.grey,\r\n    marginBottom: 10,\r\n    paddingVertical: 20,\r\n    paddingHorizontal: 20,\r\n    borderRadius: 15,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-between',\r\n  },\r\n  toDoText: {\r\n    color: 'white',\r\n    fontSize: 16,\r\n    fontWeight: '500',\r\n  },\r\n  finishToDoText: {\r\n    textDecorationLine: 'line-through',\r\n    color: 'grey',\r\n  },\r\n  toDoIcons: {\r\n    flexDirection: 'row',\r\n  },\r\n});\r\n"],"sourceRoot":""}